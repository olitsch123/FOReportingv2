name: Development Workflow

on:
  push:
    branches-ignore: [ main, develop ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quick-check:
    name: Quick Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
    
    - name: Check code formatting
      run: |
        black --check app/ scripts/ --line-length 88 || (echo "‚ùå Code formatting issues found. Run: black app/ scripts/ --line-length 88" && exit 1)
    
    - name: Check import sorting
      run: |
        isort --check-only app/ scripts/ --profile black || (echo "‚ùå Import sorting issues found. Run: isort app/ scripts/ --profile black" && exit 1)
    
    - name: Check basic linting
      run: |
        flake8 app/ scripts/ --count --statistics
    
    - name: Validate Docker build
      run: |
        docker build -t forreporting:dev .
        echo "‚úÖ Docker build successful"

  test-basic:
    name: Basic Test Suite
    runs-on: ubuntu-latest
    needs: quick-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio
        pip install -r requirements.txt
    
    - name: Run import tests
      run: |
        python -c "
        try:
            from app.main import app
            from app.pe_docs.api_new import router
            from app.frontend.main import main
            print('‚úÖ All critical imports successful')
        except Exception as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "
    
    - name: Run basic functionality tests
      env:
        DEPLOYMENT_MODE: test
        DATABASE_URL: sqlite:///test.db
        OPENAI_API_KEY: test_key
      run: |
        pytest tests/unit/test_models.py::TestInvestor::test_investor_creation -v
      continue-on-error: true
    
    - name: Test API endpoints
      env:
        DEPLOYMENT_MODE: test
        DATABASE_URL: sqlite:///test.db
        OPENAI_API_KEY: test_key
      run: |
        python -c "
        from fastapi.testclient import TestClient
        from app.main import app
        client = TestClient(app)
        
        # Test basic endpoints
        response = client.get('/')
        assert response.status_code == 200
        print('‚úÖ Root endpoint working')
        
        response = client.get('/health')
        assert response.status_code == 200
        print('‚úÖ Health endpoint working')
        
        print('‚úÖ Basic API tests passed')
        "

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [quick-check, test-basic]
    if: always()
    
    steps:
    - name: Development check summary
      run: |
        echo "üîç Development Workflow Summary"
        echo "=============================="
        echo "Quick Check: ${{ needs.quick-check.result }}"
        echo "Basic Tests: ${{ needs.test-basic.result }}"
        echo ""
        if [ "${{ needs.quick-check.result }}" == "success" ] && [ "${{ needs.test-basic.result }}" == "success" ]; then
          echo "‚úÖ Development checks passed!"
          echo "Ready for merge to develop branch"
        else
          echo "‚ùå Development checks failed"
          echo "Please fix issues before merging"
        fi