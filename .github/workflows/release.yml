name: Release Workflow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.1.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: vX.Y.Z (e.g., v2.1.0)"
          exit 1
        fi
        echo "✅ Version format valid: $VERSION"

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: prepare-release
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.prepare-release.outputs.version }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-push]
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        
        # Generate changelog from git commits
        if git describe --tags --abbrev=0 2>/dev/null; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG="Initial release"
          fi
        else
          CHANGELOG="Initial release"
        fi
        
        cat > release_notes.md << EOF
        # FOReporting v2 Release $VERSION
        
        ## 🚀 What's New
        
        ### Architecture Improvements
        - Modular frontend structure (dashboard split into maintainable components)
        - PE API modularization (1,298 lines → focused router modules)
        - Comprehensive test infrastructure with real test data
        
        ### Code Quality
        - Automated code formatting (black, isort, flake8)
        - Enhanced error handling (specific exception handling)
        - Production-ready logging standards
        
        ### Testing & CI/CD
        - Comprehensive test suite with pytest
        - GitHub Actions CI/CD pipeline
        - Pre-commit hooks for code quality
        - Docker containerization improvements
        
        ## 📋 Changes in this Release
        $CHANGELOG
        
        ## 🐳 Docker Image
        \`\`\`bash
        docker pull ghcr.io/${{ github.repository }}:$VERSION
        \`\`\`
        
        ## 📖 Documentation
        See README.md for setup and deployment instructions.
        
        ## 🔧 Technical Details
        - Python 3.11+ required
        - PostgreSQL 15+ recommended
        - OpenAI API key required for AI features
        EOF
        
        echo "changelog_file=release_notes.md" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.version }}
        release_name: FOReporting v2 ${{ needs.prepare-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  notify-success:
    name: Notify Successful Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-push, create-release]
    
    steps:
    - name: Release summary
      run: |
        echo "🎉 Release ${{ needs.prepare-release.outputs.version }} completed successfully!"
        echo ""
        echo "📦 Docker Image: ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}"
        echo "🔗 GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}"
        echo ""
        echo "✅ All quality gates passed"
        echo "✅ Docker image built and pushed" 
        echo "✅ Release created with changelog"