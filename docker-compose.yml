services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./alembic:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - foreporting-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U system -d foreporting_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: .
    user: "1000:1000"  # Use consistent user ID
    environment:
      # Database connection (from .env)
      DATABASE_URL: ${DATABASE_URL}
      
      # OpenAI Configuration (from .env)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_VECTOR_STORE_ID: ${OPENAI_VECTOR_STORE_ID}
      
      # Docker-safe paths (mounted volumes)
      INVESTOR1_PATH: /app/data/investor1
      INVESTOR2_PATH: /app/data/investor2
      CHROMA_DIR: /app/data/chroma
      
      # UTF-8 settings (solved in Docker)
      PGCLIENTENCODING: UTF8
      PYTHONUTF8: 1
      ENABLE_FILE_WATCHER: "false"
      
      # Fix ChromaDB issues
      CHROMA_SERVER_HOST: localhost
      CHROMA_SERVER_PORT: 8001
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - chroma_data:/app/data/chroma
      # Mount your Windows investor folders with proper permissions
      - "${INVESTOR1_PATH_HOST}:/app/data/investor1:ro"
      - "${INVESTOR2_PATH_HOST}:/app/data/investor2:ro"
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - foreporting-network
    restart: unless-stopped
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--log-level", "info"]

  # Frontend Dashboard
  frontend:
    build: .
    environment:
      API_BASE_URL: http://backend:8000
    ports:
      - "8501:8501"
    depends_on:
      - backend
    networks:
      - foreporting-network
    command: ["streamlit", "run", "app/frontend/dashboard.py", "--server.address", "0.0.0.0"]

  # File Watcher (separate container)
  watcher:
    build: .
    user: "1000:1000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      INVESTOR1_PATH: /app/data/investor1
      INVESTOR2_PATH: /app/data/investor2
      PGCLIENTENCODING: UTF8
      PYTHONUTF8: 1
      ENABLE_FILE_WATCHER: "true"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - "${INVESTOR1_PATH_HOST}:/app/data/investor1:ro"
      - "${INVESTOR2_PATH_HOST}:/app/data/investor2:ro"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - foreporting-network
    restart: unless-stopped
    command: ["python", "-m", "app.services.watcher_runner"]

volumes:
  postgres_data:
  chroma_data:

networks:
  foreporting-network:
    driver: bridge