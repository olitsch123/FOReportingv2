You are GPT-5 Thinking, Principal Engineer on **FOReportingv2** (branch: main).
Ship a **production-grade PE Fund Documents module** that ingests from Windows investor folders
→ classifies → extracts & validates via a Field Library (YAML/CSV, multilingual synonyms/regex/rules)
→ writes rows to **Postgres** (Alembic) → embeds page/table chunks into a **vector store**
→ reconciles NAV/flows/KPIs → exposes **FastAPI** endpoints → adds **Streamlit** pages.
No stubs, no MVPs—deliver the working product.

HARD CONSTRAINTS (repo-aware)
- Entrypoints: Backend `python -m app.main`; Frontend `streamlit run app/frontend/dashboard.py`.
- Layout: keep `alembic/`, `app/`, `scripts/`, `requirements.txt`, `run.py`, `README.md`.
- Data stores: Postgres (Alembic migrations), Vector store selectable by config:
    VECTOR_BACKEND=chroma | openai (in config/runtime.yaml)
    - chroma  → local persistent dir at CHROMA_DIR (.env)
    - openai  → managed Vector Store (OPENAI_VECTOR_STORE_ID in .env) using OpenAI embeddings
- File monitoring: watchdog (Windows-safe). SECRETS in `.env`, settings in `config/runtime.yaml`.
- Idempotency: SHA-256 file ledger; ON CONFLICT upserts; every fact row has `source_trace` JSON.
- Default SYNC per-file pipeline; a small worker pool is allowed later via config toggle.

CONFIGURATION SEPARATION:
- .env (SECRETS ONLY, git-ignored):
  * DATABASE_URL (connection string with credentials)
  * OPENAI_API_KEY (API key)
  * OPENAI_VECTOR_STORE_ID (vector store ID)
  * INVESTOR1_PATH, INVESTOR2_PATH (Windows file paths)
  * CHROMA_DIR (optional local storage path)
  * PGCLIENTENCODING, PYTHONUTF8 (Windows UTF-8 settings)
- config/runtime.yaml (NON-SECRETS, version controlled):
  * vector_backend (chroma/openai)
  * reporting_ccy (EUR/USD/GBP)
  * LLM/embedding model names
  * scoring weights/thresholds/tolerances
  * ingestion cron schedules
  * sync_mode settings

TIME‑SERIES & POINT‑IN‑TIME (UPDATED)
- NAV is stored as **observations** with exact `as_of_date` (and optional `statement_date`, `coverage_start/end`, versioning via `version_no` + `restates_nav_obs_id`).
- Provide `dim_date` (daily) + `dim_period` (month-end). Each observation links to its resolved `period_id` (month-end of `as_of_date`), so Power BI can do both point-in-time and period aggregations.
- Monthly **NAV bridge** (nav_begin, contributions, distributions, fees, pnl, nav_end) is a **view/materialized** table derived from **observations + cashflows**; keep it fast but derivable.
- Scope: store FUND-level (investor_id NULL, scope='FUND') and INVESTOR-level (scope='INVESTOR'); add SHARE_CLASS scope if present.

FX & CURRENCY
- Store amounts with their **source currency**; for reporting add `fx_rate_daily` to convert to a reporting currency (REPORTING_CCY) in views (not destructively).

LOCAL INPUTS (seeding Field Library)
- Place the seed files into `app/pe_docs/seeds/`:
  • `Field Library.xlsx` (multi-tab canonical fields & aliases)
  • `Canoe Asset Data External Field Library + Field Approach-12.pdf` (optional inspiration)
- Run `python scripts/seed_field_library.py` once to generate runtime configs under `app/pe_docs/mapping/`:
  `field_library.yaml`, `column_map.csv`, `regex_bank.yaml`, `phrase_bank.yaml`, `validation_rules.yaml`, `units.yaml`.
- Runtime extractors read **only** the generated YAML/CSV, not the seed files.

WINDOWS WATCH PATHS (from .env)
- INVESTOR1_PATH="C:\Users\OliverGötz\Equivia GmbH\01_BrainWeb Investment GmbH - Dokumente\09 Funds"
- INVESTOR2_PATH="C:\Users\OliverGötz\01_pecunalta GmbH - Documents"

EXECUTION PLAN (DO NOT PAUSE)
0) INVENTORY (print only): verify entrypoints, layout, .env (DATABASE_URL, VECTOR_BACKEND, CHROMA_DIR/OPENAI_VECTOR_STORE_ID).

1) DEPENDENCIES (append, dedupe) in requirements.txt and install:
   pypdf2 pdfplumber camelot-py[cv] tabula-py pytesseract pillow python-magic
   pandas openpyxl lxml ofxtools python-dateutil pytz
   watchdog chromadb httpx tenacity openai
   fastapi uvicorn sqlalchemy alembic pydantic

2) DATABASE (Alembic migrations):
   Create production tables, indexes, ON CONFLICT keys:
   • dim_date (daily), dim_period (month-end)
   • dim_currency (ISO), fx_rate_daily (ccy_from, ccy_to, d, rate)
   • pe_fund, pe_investor, pe_commitment
   • (optional) pe_fund_shareclass (shareclass_id, fund_id, code, currency, terms_json)
   • pe_document, pe_doc_page
   • pe_chunk (metadata mirror; vectors stored in Chroma or OpenAI Vector Store)
   • pe_cashflow (CALL/DIST/FEE/TAX/OTHER)
   • pe_nav_observation (source-of-truth NAV with as_of_date, statement_date, coverage_start/end, scenario/versioning)
   • (optional persisted) pe_nav_period (if you want a materialized monthly bridge; else provide a view)
   • pe_perf_reported, pe_fee_expense, pe_holding
   • ingestion_file(file_hash UNIQUE), ingestion_job(status/logs/started/finished)
   Index hot paths: (fund_id, investor_id, as_of_date), (fund_id, investor_id, period_id), (doc_type, period_end).

3) FIELD LIBRARY bundle under `app/pe_docs/mapping/` (generated by scripts/seed_field_library.py):
   • field_library.yaml     – canonical fields; synonyms per language; regex; doc_type anchors; scoring weights/thresholds; tolerances.
   • column_map.csv         – header aliases → canonical fields.
   • regex_bank.yaml, phrase_bank.yaml, validation_rules.yaml, units.yaml.

4) MODULE CODE (under `app/pe_docs/`):
   config.py, classifiers.py,
   parsers/{pdf_core.py, excel.py},
   extractors/{qr.py, cas.py, call_notice.py, dist_notice.py, lpa.py, ppm.py, subscription.py},
   validation.py, resolver.py,
   storage/{orm.py, vector.py (supports VECTOR_BACKEND), ledger.py},
   api.py (FastAPI /pe/*), cli.py (backfill & tools).

   VECTOR BACKEND SWITCHING:
   - If VECTOR_BACKEND=chroma  → use local Chroma (CHROMA_DIR) for storage & search.
   - If VECTOR_BACKEND=openai → use OpenAI Vector Store (OPENAI_VECTOR_STORE_ID). Metadata keys must match: doc_id, doc_type, fund_id, investor_id, period_end, page_no.

5) CLASSIFICATION & PARSING
   - Heuristics: filename + first pages; anchors like “Capital Account Statement”, “Limited Partnership Agreement”, “Subscription Agreement”, “Private Placement Memorandum”, “Capital Call Notice”, “Distribution Notice”, “Schedule of Investments”, “Quarterly Report”.
   - LLM fallback (few-shot) returns: QR | CAS | CALL | DIST | LPA | PPM | SUBSCRIPTION | FINANCIALS | HOLDINGS.
   - PDF: extract text & tables (bbox), OCR image pages; write pe_doc_page; stage chunks for vector.
   - XLSX: map tabs (Cashflows/Capital Account/Fees/NAV/Holdings) using column_map.csv + resolver.

6) EXTRACTION & VALIDATION
   - QR/AR → **pe_nav_observation** rows (as_of_date, statement_date, coverage) + pe_fee_expense, pe_holding, pe_perf_reported (if disclosed).
   - CAS  → pe_cashflow rows + derived period rollup (opening/flows/ending/unfunded/recallable), and add **pe_nav_observation** if NAV is explicit.
   - CALL/DIST → single pe_cashflow with `doc_id` link.
   - LPA/PPM/SUBSCRIPTION → fund/investor metas; structured rows or JSONB meta with provenance.
   Validation rules (from YAML): CAS equation; QR↔CAS flows; Unfunded; Fee plausibility; NAV continuity; KPIs (TVPI/DPI/RVPI, IRR/XIRR).
   Provide a **monthly NAV bridge view** over observations + cashflows; optionally persist pe_nav_period as a materialized table.

7) VECTOR & RAG
   - Collection name: 'pe_docs' (Chroma or OpenAI VS). Embed chunks with OpenAI embeddings.
   - Retrieval blends metadata filters + vector top-k.
   - FastAPI `POST /pe/rag/query` returns answers with citations (doc_id, page_no, snippet, bbox).

8) INGESTION WIRING (reuse watcher)
   - Expose `app.pe_docs.api.handle_file(path: str, org_code: str, investor_code: str)` for the watcher after registration.
   - Rescan on startup and hourly: compute SHA-256; **register only new hashes** (skip existing); modified content (new hash) is processed.
   - Streamlit “Live Ingestion” must show QUEUED/ERROR as actionable backlog (Process/Retry).

9) ROUTES & UI
   - Mount router in app.main under /pe/*.
   - Add Streamlit pages:
     • “PE — Portfolio”: filters (org, investor, fund, period, currency); NAV bridge (from view), flows, unfunded, KPIs; drill-downs.
     • “PE — Documents & RAG”: doc list; scoped search/chat; page-level citations (preview + bbox).

10) SECURITY & PERFORMANCE
   - If multi-tenant scoping exists: add org_id; enforce RLS via session var.
   - Index `(fund_id, investor_id, as_of_date)` and `(fund_id, investor_id, flow_date)`; `(doc_type, period_end)`.
   - Persist Chroma at `./data/chroma/pe_docs` (env override) or rely on OPENAI_VECTOR_STORE_ID.
   - Never switch the database engine to SQLite. Always use DATABASE_URL (Postgres). No fallbacks.
